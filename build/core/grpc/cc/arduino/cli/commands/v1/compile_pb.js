// source: cc/arduino/cli/commands/v1/compile.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var cc_arduino_cli_commands_v1_common_pb = require('../../../../../cc/arduino/cli/commands/v1/common_pb.js');
goog.object.extend(proto, cc_arduino_cli_commands_v1_common_pb);
var cc_arduino_cli_commands_v1_lib_pb = require('../../../../../cc/arduino/cli/commands/v1/lib_pb.js');
goog.object.extend(proto, cc_arduino_cli_commands_v1_lib_pb);
goog.exportSymbol('proto.cc.arduino.cli.commands.v1.CompileRequest', null, global);
goog.exportSymbol('proto.cc.arduino.cli.commands.v1.CompileResponse', null, global);
goog.exportSymbol('proto.cc.arduino.cli.commands.v1.ExecutableSectionSize', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cc.arduino.cli.commands.v1.CompileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cc.arduino.cli.commands.v1.CompileRequest.repeatedFields_, null);
};
goog.inherits(proto.cc.arduino.cli.commands.v1.CompileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cc.arduino.cli.commands.v1.CompileRequest.displayName = 'proto.cc.arduino.cli.commands.v1.CompileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cc.arduino.cli.commands.v1.CompileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cc.arduino.cli.commands.v1.CompileResponse.repeatedFields_, null);
};
goog.inherits(proto.cc.arduino.cli.commands.v1.CompileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cc.arduino.cli.commands.v1.CompileResponse.displayName = 'proto.cc.arduino.cli.commands.v1.CompileResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cc.arduino.cli.commands.v1.ExecutableSectionSize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.displayName = 'proto.cc.arduino.cli.commands.v1.ExecutableSectionSize';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.repeatedFields_ = [8,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cc.arduino.cli.commands.v1.CompileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cc.arduino.cli.commands.v1.CompileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: (f = msg.getInstance()) && cc_arduino_cli_commands_v1_common_pb.Instance.toObject(includeInstance, f),
    fqbn: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sketchPath: jspb.Message.getFieldWithDefault(msg, 3, ""),
    showProperties: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    preprocess: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    buildCachePath: jspb.Message.getFieldWithDefault(msg, 6, ""),
    buildPath: jspb.Message.getFieldWithDefault(msg, 7, ""),
    buildPropertiesList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    warnings: jspb.Message.getFieldWithDefault(msg, 9, ""),
    verbose: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    quiet: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    vidPid: jspb.Message.getFieldWithDefault(msg, 12, ""),
    jobs: jspb.Message.getFieldWithDefault(msg, 14, 0),
    librariesList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,
    optimizeForDebug: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    exportDir: jspb.Message.getFieldWithDefault(msg, 18, ""),
    clean: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
    createCompilationDatabaseOnly: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    sourceOverrideMap: (f = msg.getSourceOverrideMap()) ? f.toObject(includeInstance, undefined) : [],
    exportBinaries: (f = msg.getExportBinaries()) && google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cc.arduino.cli.commands.v1.CompileRequest;
  return proto.cc.arduino.cli.commands.v1.CompileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cc.arduino.cli.commands.v1.CompileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cc_arduino_cli_commands_v1_common_pb.Instance;
      reader.readMessage(value,cc_arduino_cli_commands_v1_common_pb.Instance.deserializeBinaryFromReader);
      msg.setInstance(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFqbn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSketchPath(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowProperties(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreprocess(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildCachePath(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildPath(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addBuildProperties(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setWarnings(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVerbose(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQuiet(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setVidPid(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJobs(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addLibraries(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOptimizeForDebug(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setExportDir(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClean(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCreateCompilationDatabaseOnly(value);
      break;
    case 22:
      var value = msg.getSourceOverrideMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 23:
      var value = new google_protobuf_wrappers_pb.BoolValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader);
      msg.setExportBinaries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cc.arduino.cli.commands.v1.CompileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cc.arduino.cli.commands.v1.CompileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cc_arduino_cli_commands_v1_common_pb.Instance.serializeBinaryToWriter
    );
  }
  f = message.getFqbn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSketchPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getShowProperties();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPreprocess();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getBuildCachePath();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBuildPath();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBuildPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getWarnings();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getVerbose();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getQuiet();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getVidPid();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getJobs();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getLibrariesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = message.getOptimizeForDebug();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getExportDir();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getClean();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getCreateCompilationDatabaseOnly();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getSourceOverrideMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(22, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getExportBinaries();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional Instance instance = 1;
 * @return {?proto.cc.arduino.cli.commands.v1.Instance}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getInstance = function() {
  return /** @type{?proto.cc.arduino.cli.commands.v1.Instance} */ (
    jspb.Message.getWrapperField(this, cc_arduino_cli_commands_v1_common_pb.Instance, 1));
};


/**
 * @param {?proto.cc.arduino.cli.commands.v1.Instance|undefined} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
*/
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setInstance = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.clearInstance = function() {
  return this.setInstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.hasInstance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string fqbn = 2;
 * @return {string}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getFqbn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setFqbn = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sketch_path = 3;
 * @return {string}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getSketchPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setSketchPath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool show_properties = 4;
 * @return {boolean}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getShowProperties = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setShowProperties = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool preprocess = 5;
 * @return {boolean}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getPreprocess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setPreprocess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string build_cache_path = 6;
 * @return {string}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getBuildCachePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setBuildCachePath = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string build_path = 7;
 * @return {string}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getBuildPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setBuildPath = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated string build_properties = 8;
 * @return {!Array<string>}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getBuildPropertiesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setBuildPropertiesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.addBuildProperties = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.clearBuildPropertiesList = function() {
  return this.setBuildPropertiesList([]);
};


/**
 * optional string warnings = 9;
 * @return {string}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getWarnings = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setWarnings = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool verbose = 10;
 * @return {boolean}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getVerbose = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setVerbose = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool quiet = 11;
 * @return {boolean}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getQuiet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setQuiet = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional string vid_pid = 12;
 * @return {string}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getVidPid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setVidPid = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional int32 jobs = 14;
 * @return {number}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getJobs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setJobs = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * repeated string libraries = 15;
 * @return {!Array<string>}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getLibrariesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setLibrariesList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.addLibraries = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.clearLibrariesList = function() {
  return this.setLibrariesList([]);
};


/**
 * optional bool optimize_for_debug = 16;
 * @return {boolean}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getOptimizeForDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setOptimizeForDebug = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional string export_dir = 18;
 * @return {string}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getExportDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setExportDir = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional bool clean = 19;
 * @return {boolean}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getClean = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setClean = function(value) {
  return jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * optional bool create_compilation_database_only = 21;
 * @return {boolean}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getCreateCompilationDatabaseOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setCreateCompilationDatabaseOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * map<string, string> source_override = 22;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getSourceOverrideMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 22, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.clearSourceOverrideMap = function() {
  this.getSourceOverrideMap().clear();
  return this;};


/**
 * optional google.protobuf.BoolValue export_binaries = 23;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.getExportBinaries = function() {
  return /** @type{?proto.google.protobuf.BoolValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BoolValue, 23));
};


/**
 * @param {?proto.google.protobuf.BoolValue|undefined} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
*/
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.setExportBinaries = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cc.arduino.cli.commands.v1.CompileRequest} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.clearExportBinaries = function() {
  return this.setExportBinaries(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cc.arduino.cli.commands.v1.CompileRequest.prototype.hasExportBinaries = function() {
  return jspb.Message.getField(this, 23) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cc.arduino.cli.commands.v1.CompileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cc.arduino.cli.commands.v1.CompileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    outStream: msg.getOutStream_asB64(),
    errStream: msg.getErrStream_asB64(),
    buildPath: jspb.Message.getFieldWithDefault(msg, 3, ""),
    usedLibrariesList: jspb.Message.toObjectList(msg.getUsedLibrariesList(),
    cc_arduino_cli_commands_v1_lib_pb.Library.toObject, includeInstance),
    executableSectionsSizeList: jspb.Message.toObjectList(msg.getExecutableSectionsSizeList(),
    proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cc.arduino.cli.commands.v1.CompileResponse}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cc.arduino.cli.commands.v1.CompileResponse;
  return proto.cc.arduino.cli.commands.v1.CompileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cc.arduino.cli.commands.v1.CompileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cc.arduino.cli.commands.v1.CompileResponse}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutStream(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErrStream(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildPath(value);
      break;
    case 4:
      var value = new cc_arduino_cli_commands_v1_lib_pb.Library;
      reader.readMessage(value,cc_arduino_cli_commands_v1_lib_pb.Library.deserializeBinaryFromReader);
      msg.addUsedLibraries(value);
      break;
    case 5:
      var value = new proto.cc.arduino.cli.commands.v1.ExecutableSectionSize;
      reader.readMessage(value,proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.deserializeBinaryFromReader);
      msg.addExecutableSectionsSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cc.arduino.cli.commands.v1.CompileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cc.arduino.cli.commands.v1.CompileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutStream_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getErrStream_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBuildPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUsedLibrariesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      cc_arduino_cli_commands_v1_lib_pb.Library.serializeBinaryToWriter
    );
  }
  f = message.getExecutableSectionsSizeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes out_stream = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.getOutStream = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes out_stream = 1;
 * This is a type-conversion wrapper around `getOutStream()`
 * @return {string}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.getOutStream_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutStream()));
};


/**
 * optional bytes out_stream = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutStream()`
 * @return {!Uint8Array}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.getOutStream_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutStream()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileResponse} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.setOutStream = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes err_stream = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.getErrStream = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes err_stream = 2;
 * This is a type-conversion wrapper around `getErrStream()`
 * @return {string}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.getErrStream_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErrStream()));
};


/**
 * optional bytes err_stream = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErrStream()`
 * @return {!Uint8Array}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.getErrStream_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErrStream()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileResponse} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.setErrStream = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string build_path = 3;
 * @return {string}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.getBuildPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileResponse} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.setBuildPath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Library used_libraries = 4;
 * @return {!Array<!proto.cc.arduino.cli.commands.v1.Library>}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.getUsedLibrariesList = function() {
  return /** @type{!Array<!proto.cc.arduino.cli.commands.v1.Library>} */ (
    jspb.Message.getRepeatedWrapperField(this, cc_arduino_cli_commands_v1_lib_pb.Library, 4));
};


/**
 * @param {!Array<!proto.cc.arduino.cli.commands.v1.Library>} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileResponse} returns this
*/
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.setUsedLibrariesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.cc.arduino.cli.commands.v1.Library=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cc.arduino.cli.commands.v1.Library}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.addUsedLibraries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.cc.arduino.cli.commands.v1.Library, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cc.arduino.cli.commands.v1.CompileResponse} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.clearUsedLibrariesList = function() {
  return this.setUsedLibrariesList([]);
};


/**
 * repeated ExecutableSectionSize executable_sections_size = 5;
 * @return {!Array<!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize>}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.getExecutableSectionsSizeList = function() {
  return /** @type{!Array<!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cc.arduino.cli.commands.v1.ExecutableSectionSize, 5));
};


/**
 * @param {!Array<!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize>} value
 * @return {!proto.cc.arduino.cli.commands.v1.CompileResponse} returns this
*/
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.setExecutableSectionsSizeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize}
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.addExecutableSectionsSize = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.cc.arduino.cli.commands.v1.ExecutableSectionSize, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cc.arduino.cli.commands.v1.CompileResponse} returns this
 */
proto.cc.arduino.cli.commands.v1.CompileResponse.prototype.clearExecutableSectionsSizeList = function() {
  return this.setExecutableSectionsSizeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.prototype.toObject = function(opt_includeInstance) {
  return proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    size: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxSize: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize}
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cc.arduino.cli.commands.v1.ExecutableSectionSize;
  return proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize}
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMaxSize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize} returns this
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 size = 2;
 * @return {number}
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize} returns this
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 max_size = 3;
 * @return {number}
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.prototype.getMaxSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.cc.arduino.cli.commands.v1.ExecutableSectionSize} returns this
 */
proto.cc.arduino.cli.commands.v1.ExecutableSectionSize.prototype.setMaxSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.cc.arduino.cli.commands.v1);
